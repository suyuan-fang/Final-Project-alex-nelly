---
title: "Chicago Crime Prevention"
author: "Alex & Nelly" 
date: 2024-12-07
format:
  html:
    theme: cosmo
    toc: true
    toc-depth: 3
    code-fold: true
    code-tools: true
  pdf:
    toc: true
    number-sections: true
    colorlinks: true
execute:
  echo: true
  warning: false
  message: false
  eval: true  
jupyter: 
  kernelspec:
    name: python3
    display_name: Python 3
    language: python
  path: /opt/miniconda3/bin/python3  
---
Partner 1 (name and cnet ID): Suyuan Fang - suyuanfang
Partner 2 (name and cnet ID): Jiaxuan nie - Jnie21 


# Executive Summary 
This report analyzes Chicago's crime trends, with an emphasis on the correlation between crime categories, geographic locations, and seasonal fluctuations. The analysis identifies critical factors that influence crime patterns by utilizing data from the City of Chicago's public records. Actionable strategies for reducing crime rates have been informed by a combination of spatial and temporal analysis techniques. The following are suggested: the implementation of targeted seasonal crime prevention programs, the expansion of welfare initiatives, the enhancement of urban planning, and the expansion of employment opportunities.

# Intro 
Chicago Crime rate have been a persistent issue ove the past decade, and just recently, there have been dramatic movement in the police department that puts people in concern of the stabiltiy in safety. 
#Mayor Brandon Johnson, who was sworn in earlier this year, was one of the many to advocate for defunding the police in 2020 after Floyd was murdered by a Minneapolis police officer, saying “I don’t look at it as a slogan” and adding, “It’s an actual political goal," during a podcastThe city reduced the police department by 614 positions and cut funding by 2.7% in 2021 in the immediate aftermath of Floyd's murder. Since then, the department has grown in size and spending.

Despite maintaining the same staffing levels for 2024 as the previous year, the city reported a 30% increase in crime in 2022. While murders decreased by 13%, from 804 in 2021 to 699 in 2022, the city attributed the overall crime spike to a 44% rise in property crime and a 1% increase in violent crime compared to 2021. The tools and information that will be presented could help facilitate discussions about the causes of and solutions to the city's serious crime problem. This may also help answer a common question many Chicagoans face when they travel: "Is it really as bad as all the news reports suggest?". We need to take a look at Chicago's crime pattern in the past decade to help us understand the history and whetehr it is necessary to restaffing the police force. 

# Research question
What are the key factors influencing crime patterns in terms of type, location, and seasonality over time, and how can this information inform targeted crime prevention strategies during the past decade?

# Data
```{python} 
import numpy as np  
import pandas as pd  
import altair as alt

file_2008_2011 = "/Users/suyuanfang/Desktop/Pyhton/final project/Chicago_Crimes_2008_to_2011.csv"
file_2012_2017 = "/Users/suyuanfang/Desktop/Pyhton/final project/Chicago_Crimes_2012_to_2017.csv"

data_2008_2011 = pd.read_csv(file_2008_2011, on_bad_lines="skip")
data_2012_2017 = pd.read_csv(file_2012_2017, on_bad_lines="skip")

dataset = pd.concat([data_2008_2011, data_2012_2017], ignore_index=True)

dataset.info()
# data link
# https://www.dropbox.com/scl/fo/yjo8xyyg13zx678dfpzwy/AHTaxAa2uQplUupwOv1ntU8?rlkey=5cg9m9zhcxf95l8y20b1ddgvn&st=hiwpm6d7&dl=0
```

The analysis employs data from the City of Chicago's open data portal. The research was centered on the identification of spatial concentrations of crimes and their correlations with neighborhood demographics following the extraction, cleansing, and processing of data. Geographic visualization techniques were employed to map crime density and locations, while temporal analyses were conducted to investigate year-over-year changes and seasonality. Ultimately, an interactive Shiny App was launched to facilitate the dynamic exploration of crime trends, thereby assisting policymakers and stakeholders in visualizing the findings and customizing their interventions.

# Data Cleaning
```{python} 
missing_values = dataset.isnull().sum()
missing_percent = (missing_values / len(dataset)) * 100
missing_info = pd.DataFrame({'Missing Values': missing_values, 'Percentage': missing_percent})
print(missing_info.sort_values(by='Percentage', ascending=False))

filtered_data = dataset[dataset['Year'] != 2017]

columns_to_remove = [
    "Unnamed: 0",
    "ID",
    "IUCR",
    "Beat",
    "Case Number",
    "District",
    "Ward",
    "Updated On",
    "Community Area",
    "X Coordinate",
    "Y Coordinate",
    "FBI Code",
]

analysis_data = filtered_data.drop(columns=columns_to_remove, axis=1)
analysis_data['Date'] = pd.to_datetime(analysis_data['Date'], format="%m/%d/%Y %I:%M:%S %p")
analysis_data.set_index("Date", inplace=True)
print(analysis_data.info())
analysis_data.head()
analysis_data.to_csv("/Users/suyuanfang/Desktop/Pyhton/final project/analysis_data.csv", index=False)

```

# Data Visualization

We utilizes Altair, a visualization library, to create an interactive bar chart that displays the top 15 crime types in Chicago. First, the Altair renderer is enabled using alt.renderers.enable("default") to ensure proper visualization within the Jupyter Notebook, and alt.data_transformers.disable_max_rows() removes any row limitations to handle larger datasets. The data preparation step involves calculating the frequency of each crime type using value_counts() on the Primary Type column of the dataset analysis_data, followed by resetting the index and renaming the columns to Crime Type and Count. This creates a summarized DataFrame with crime types and their respective counts. The Altair chart is constructed using alt.Chart() to initialize the data, .mark_bar() to specify a bar chart, and .encode() to configure the axes, bar colors, and tooltip interactivity. The x-axis displays crime types sorted in descending order, while the y-axis shows their corresponding counts. Additional properties, such as chart title, width, and height, are customized using .properties(). Finally, the chart is displayed with chart.show(), rendering a visually engaging and interactive bar chart titled “Top 15 Crime Types (Vertical),” where theft emerges as the most frequent crime type.

```{python} 
import altair as alt
alt.data_transformers.enable("default")

primary_type_counts = analysis_data['Primary Type'].value_counts().reset_index()
primary_type_counts.columns = ['Crime Type', 'Count']

chart = (
    alt.Chart(primary_type_counts.head(15))
    .mark_bar()
    .encode(
        x=alt.X('Crime Type:N', sort='-y', title='Crime Type'),
        y=alt.Y('Count:Q', title='Number of Crimes'),
        color='Count:Q',
        tooltip=['Crime Type', 'Count']
    )
    .properties(
        title='Top 15 Crime Types (Vertical)',
        width=800,
        height=400
    )
)
chart.show()
```

Then generate a bar chart showcasing the top 10 locations where crimes occur, revealing that "STREET" is the most common location for crimes. The data preparation begins by calculating the frequency of each location using the value_counts() method on the Location Description column of the analysis_data dataset, which is then converted into a DataFrame using reset_index(). The columns are renamed to Location Description and Count for clarity. The Altair chart is constructed by passing the top 10 locations (head(10)) to alt.Chart() and specifying a bar chart using .mark_bar(). The encode() function is used to configure the x-axis for location descriptions (nominal data sorted by count in descending order), the y-axis for crime counts, and the bar colors based on count values using a blue color scheme. Tooltips are added for interactivity, allowing users to hover over bars to view detailed information about each location and its corresponding count. The chart's appearance is further customized with a title, width, and height using .properties(). Finally, the chart is displayed with location_chart.show(), rendering a clear visualization where "STREET" is identified as the location with the highest number of crimes.

```{python} 
location_counts = analysis_data['Location Description'].value_counts().reset_index()
location_counts.columns = ['Location Description', 'Count']
location_chart = (
    alt.Chart(location_counts.head(10))
    .mark_bar()
    .encode(
        x=alt.X('Location Description:N', sort='-y', title='Location'),
        y=alt.Y('Count:Q', title='Number of Crimes'),
        color=alt.Color('Count:Q', scale=alt.Scale(scheme='blues')),
        tooltip=['Location Description', 'Count']
    )
    .properties(
        title='Top 10 Crime Locations (Vertical)',
        width=800,
        height=400
    )
)

location_chart.show()
```




# Heatmap for Monthly Crime Counts by Year

For the heatmap, I first organized the data by resampling it to get monthly crime counts. I extracted the year and month from the data and converted numeric months into descriptive names like "Jan" for January. Using this processed data, I generated a heatmap where the x-axis represents the year, the y-axis represents the months (ordered from January to December), and the color intensity indicates the number of crimes in each month. Darker shades represent higher crime counts, and tooltips allow users to hover over each cell to view details. This visualization highlights trends, such as higher crime rates from 2008 to 2010 and the lowest average monthly crime rate in 2015.
```{python}
monthly_data = pd.DataFrame(analysis_data.resample("M").size(), columns=["Crime Count"])
monthly_data["Month"] = monthly_data.index.month.astype(str)
monthly_data["Year"] = monthly_data.index.year.astype(str)
monthly_data["Month"] = monthly_data["Month"].astype(int)
monthly_data["Month Name"] = monthly_data["Month"].map({
    1: "Jan", 2: "Feb", 3: "Mar", 4: "Apr", 5: "May", 6: "Jun",
    7: "Jul", 8: "Aug", 9: "Sep", 10: "Oct", 11: "Nov", 12: "Dec"
})

heatmap_data = monthly_data.groupby(["Year", "Month Name"])["Crime Count"].sum().reset_index()


heatmap_chart = (
    alt.Chart(heatmap_data)
    .mark_rect()
    .encode(
        x=alt.X("Year:O", title="Year"),
        y=alt.Y("Month Name:O", sort=["Jan", "Feb", "Mar", "Apr", "May", "Jun",
                                      "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], title="Month"),
        color=alt.Color("Crime Count:Q", scale=alt.Scale(scheme="blues"), title="Crime Count"),
        tooltip=["Year", "Month Name", "Crime Count"]
    )
    .properties(
        title="Monthly Crime Count by Year",
        width=800,
        height=400
    )
)

heatmap_chart.show()
```



# Geospatial Map

For the geospatial map, I used a GeoJSON file to overlay crime locations on a map of Chicago, showing the city’s boundaries for context. I cleaned the data by removing invalid latitude and longitude values to ensure accuracy. To handle the large dataset, I applied stratified random sampling, limiting the number of data points to 2,000 per year. This keeps the map clear and easy to interpret while still representing the data well.
An interactive year selector allows users to filter crime locations for specific years, making it simple to focus on a particular time frame. The map uses a light gray base layer with black borders to display Chicago’s boundaries, and individual crime locations are plotted as semi-transparent blue circles. Tooltips provide details like latitude, longitude, and year when hovered over, adding interactivity.
This map lets users explore how crime patterns change over time and across different areas of the city. It highlights trends, such as shifts in hotspots or consistent problem areas, offering useful insights for better understanding and decision-making.
```{python}
import altair as alt
import pandas as pd
import geopandas as gpd
alt.data_transformers.disable_max_rows()

chicago_boundary = gpd.read_file("/Users/suyuanfang/Desktop/Pyhton/final project/transportation_20241201.geojson")

chicago_boundary = alt.Data(values=chicago_boundary.__geo_interface__["features"])

map_marks = analysis_data[['Latitude', 'Longitude', 'Year']].dropna()
map_marks = map_marks[
    (map_marks['Latitude'] >= -90) & (map_marks['Latitude'] <= 90) & 
    (map_marks['Longitude'] >= -180) & (map_marks['Longitude'] <= 180)
]

map_marks_sampled = map_marks.groupby('Year').apply(lambda x: x.sample(min(len(x), 2000), random_state=42)).reset_index(drop=True)

selector = alt.selection_single(
    fields=['Year'],
    bind=alt.binding_select(options=sorted(map_marks_sampled['Year'].unique())),
    name="Select Year"
)

background_map = alt.Chart(chicago_boundary).mark_geoshape(
    fill="lightgray",
    stroke="black"
).properties(
    width=1000,
    height=700
).project(
    type='mercator'  
)

crime_map = alt.Chart(map_marks_sampled).mark_circle(size=20, opacity=0.5).encode(
    longitude=alt.Longitude('Longitude:Q', title='Longitude'),
    latitude=alt.Latitude('Latitude:Q', title='Latitude'),
    color=alt.value("blue"),
    tooltip=['Latitude:Q', 'Longitude:Q', 'Year:O']
).add_selection(
    selector
).transform_filter(
    selector
)

final_map = background_map + crime_map

final_map.properties(
    title="Crime Locations in Chicago by Year"
).show()
selected_year = 2008  
year_data = map_marks_sampled[map_marks_sampled['Year'] == selected_year]

```


We created a script that reads a GeoJSON file containing Chicago's boundary data and converts it into a format compatible with Altair. By filtering the dataset for valid latitude and longitude values and focusing specifically on the "THEFT" crime type, we ensured that the analysis exclusively concentrates on larceny offenses, keeping the data relevant. To improve visualization clarity and performance, we applied stratified random sampling, limiting the dataset to a maximum of 2,000 points per year.
We used alt.selection_single() to implement a dynamic year selector, allowing users to interactively choose specific years from a dropdown menu. To ensure geographic accuracy, we employed the Mercator projection to render the background map of Chicago, with black borders and a light gray fill. Theft crime locations are overlaid as semi-transparent orange circles, and tooltips display details such as latitude, longitude, and year when hovered over. Our interactive visualization, "Theft Crime Locations in Chicago by Year (With Map Background)," combines the boundary map and crime data to help users explore spatial and temporal patterns of theft. This tool offers valuable insights into theft hotspots and trends over time, supporting data-driven decision-making and resource allocation.
```{python} 
import altair as alt
import pandas as pd
import geopandas as gpd

chicago_boundary = gpd.read_file("/Users/suyuanfang/Desktop/Pyhton/final project/transportation_20241201.geojson")

chicago_boundary_alt = alt.Data(values=chicago_boundary.__geo_interface__["features"])

theft_data = analysis_data[['Latitude', 'Longitude', 'Year', 'Primary Type']].dropna()
theft_data = theft_data[
    (theft_data['Latitude'] >= -90) & (theft_data['Latitude'] <= 90) &
    (theft_data['Longitude'] >= -180) & (theft_data['Longitude'] <= 180) &
    (theft_data['Primary Type'] == 'THEFT')  
]

theft_sampled = theft_data.groupby('Year').apply(lambda x: x.sample(min(len(x), 2000), random_state=42)).reset_index(drop=True)

selector = alt.selection_single(
    fields=['Year'],
    bind=alt.binding_select(options=sorted(theft_sampled['Year'].unique())),
    name="Select Year"
)

background_map = alt.Chart(chicago_boundary_alt).mark_geoshape(
    fill="lightgray",
    stroke="black"
).properties(
    width=1000,
    height=700
).project(
    type='mercator'
)

theft_map = alt.Chart(theft_sampled).mark_circle(size=20, opacity=0.5).encode(
    longitude=alt.Longitude('Longitude:Q', title='Longitude'),
    latitude=alt.Latitude('Latitude:Q', title='Latitude'),
    color=alt.value("orange"),  
    tooltip=['Latitude:Q', 'Longitude:Q', 'Year:O']
).add_selection(
    selector
).transform_filter(
    selector
)

final_map = background_map + theft_map

final_map.properties(
    title="Theft Crime Locations in Chicago by Year"
).show()

```


# Shiny App
This Shiny app allows users to explore Chicago crime data interactively. It loads crime data from a CSV file and provides a dropdown menu where users can select one or more crime types to analyze. Based on the selected types, the app filters the data and dynamically generates a bar chart using Altair. The chart displays the number of crimes for each selected type, with color intensity representing the counts and tooltips showing details when hovering over the bars. The app ensures a smooth user experience by dynamically updating the chart in response to user input and handling cases where no data is selected.
```{python} 
import pandas as pd
from shiny import App, render, ui, reactive
import altair as alt
import nest_asyncio

nest_asyncio.apply()

analysis_data = pd.read_csv('/Users/suyuanfang/Desktop/Pyhton/final project/analysis_data.csv')


crime_types = analysis_data['Primary Type'].unique()

app_ui = ui.page_fluid(
    ui.h1("Chicago Crime Data Visualization"),
    ui.input_selectize(
        "crime_types",
        "Select Crime Types:",
        choices=sorted(crime_types.tolist()),
        selected=crime_types.tolist()[:5],
        multiple=True,
    ),
    ui.output_ui("crime_plot")
)

def server(input, output, session):
    @reactive.Calc
    def filtered_data():
        selected_types = input.crime_types()
        if not selected_types:
            return pd.DataFrame(columns=['Primary Type'])
        return analysis_data[analysis_data['Primary Type'].isin(selected_types)]

    @output
    @render.ui
    def crime_plot():
        data = filtered_data()
        if data.empty:
            empty_chart = alt.Chart(pd.DataFrame({'x': [], 'y': []})).mark_bar()
            return ui.HTML(empty_chart.to_html())

        crime_counts = data['Primary Type'].value_counts().reset_index()
        crime_counts.columns = ['Crime_Type', 'Count']

        chart = (
            alt.Chart(crime_counts)
            .mark_bar()
            .encode(
                x=alt.X('Crime_Type:N', sort='-y', title='Crime Type'),
                y=alt.Y('Count:Q', title='Number of Crimes'),
                color=alt.Color('Count:Q', scale=alt.Scale(scheme='blues')),
                tooltip=['Crime_Type', 'Count'],
            )
            .properties(
                title='Number of Crimes for Selected Crime Types',
                width='container',
                height=400,
            )
            .configure_axis(labelAngle=-45)
        )
        return ui.HTML(chart.to_html())

app = App(app_ui, server)

if __name__ == "__main__":
    app.run()
```

# recommendations and conclusion
In order to address these obstacles, it is imperative to implement a multifaceted strategy that combines immediate interventions with long-term structural reforms. It is advised that seasonal crime prevention programs be implemented to address specific crime categories during their peak periods. For example, the implementation of targeted measures during the winter can address property crimes, while the deployment of additional law enforcement resources and community outreach programs during the summer can help mitigate the increase in larceny.

In order to address the root causes of illicit activity, it is essential to expand welfare programs. Investing in education, mental health services, and affordable housing can significantly reduce crime rates by addressing the underlying social inequalities. These initiatives should prioritize communities that have been identified as high-crime areas through the analysis.

Urban planning has a substantial impact on crime prevention. By enhancing the visibility and illumination of public spaces, particularly in high-crime areas, it is possible to deter criminal activities. The establishment of secure neighborhoods is facilitated by the promotion of mixed-use developments that integrate residential, commercial, and recreational spaces, thereby fostering informal surveillance and community engagement.

Finally, the reduction of crime requires the expansion of employment opportunities. Residents can acquire the requisite skills for sustainable employment through vocational training programs, while job opportunities can be generated in vulnerable communities through partnerships with local businesses. In addition to improving economic prospects, these initiatives enhance a sense of community stability and resilience.

The findings of this report emphasize the importance of data-driven policymaking in Chicago's crime prevention initiatives. By integrating seasonal prevention strategies, welfare support, urban redevelopment, and employment growth, policymakers can develop comprehensive solutions that promote safety and equity. The holistic approach of addressing crime through socioeconomic empowerment and sustainable development is consistent with the progressive vision, which will enable a more prosperous and secure Chicago.